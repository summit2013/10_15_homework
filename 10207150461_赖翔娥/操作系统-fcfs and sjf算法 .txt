
/*信管15班  10207150461  赖翔娥
平台：visual studio 2010
语言：c++
由于在此程序中添加了一个定位光标函数gotxy（），而且限于能力问题，暂时只适合用于
每次输入的进程数必须为三个，光标才能准确定位。
此程序的最短优先法属于非抢占式，不会写抢占式的。*/

#include<iostream>
#include<windows.h>
using namespace std;
char sign;
int processnum,h=8;
char name[100];
double avewholetime,aveweighttime,sumwholetime=0,sumweighttime=0;
double arrivetime[100],runtime[100],begintime[100],finishtime[100],a[100],b[100];
double wholetime[100],weighttime[100];
void gotxy(int x,int y)//光标函数，第x列，第y行
{
	int xx=0x0b;
	HANDLE hOutput;
	COORD loc;
	loc.X=x;
	loc.Y=y;
	hOutput=GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorPosition(hOutput,loc);
	return;
}
void same1(char sign)//两个算法共同部分1，写成函数，作为调用
{
	switch(sign)
	{
	case 'f':cout<<"******************先来先服务算法（非抢占式）*******************"<<endl;break;
	case 's':cout<<"******************最短作业优先法（非抢占式）*******************"<<endl;break;
	default:cout<<"输入有误！";
	}
	cout<<"请输入进程个数：  ";
	cin>>processnum;
	cout<<endl;
	cout<<"进程名"<<"  "<<"到达时间"<<"  "<<"服务时间"<<endl;	
	for(int i=0;i<processnum;i++)
	{
	
		cin>>name[i];
		gotxy(11,h);//此时光标位置会定位在第h行，第11列
		cin>>arrivetime[i];
		gotxy(20,h);
		cin>>runtime[i];
		h++;
	}
	cout<<endl;
}
void same2()//两算法共同部分2，实现得出每个进程的开始执行时间和完成时间
{
	begintime[0]=arrivetime[0];
	finishtime[0]=begintime[0]+runtime[0];
	for(int i=1;i<processnum;i++)
	{
		finishtime[i]=runtime[i];
		finishtime[i]+=finishtime[i-1];
		begintime[i]=finishtime[i-1];
	}
}
void same3()//实现输出每个进程的进度图形
{
	for(int i=1;i<=runtime[0];i++)
    {
	  cout<<name[0];
     }
	cout<<endl;
	for(int i=2;i<=processnum;i++)
	{
		for(int k=0;k<finishtime[i-2];k++)
		{
			cout<<"  ";
		}
		for(int k=0;k<runtime[i-1];k++)
		{
			cout<<name[i-1];
		}
		cout<<endl;
	}
	
}
void sum()//求出总的周转时间和总的带权时间
{
	for(int i=0;i<processnum;i++)
	{
		sumwholetime+=wholetime[i];
		sumweighttime+=weighttime[i];
	}
}
void samejisuan()//实现得出平均周转时间和平均带权周转时间，并输出相应的算法结果
{
	for(int i=0;i<processnum;i++)
	{
        wholetime[i]=finishtime[i]-arrivetime[i];
		weighttime[i]=wholetime[i]/runtime[i];
	}
	sum();
    avewholetime=sumwholetime/processnum;
    aveweighttime=sumweighttime/processnum;
    cout<<"进程名"<<" "<<"开始执行时间"<<" "<<"服务时间"<<" "<<"完成时间"<<" "<<"周转时间"<<" "<<"带权时间"<<endl;
	cout<<endl;
    for(int i=0;i<processnum;i++)
    {
	  cout<<name[i]<<"          "<<begintime[i]<<"            "<<runtime[i]<<"        "<<finishtime[i]<<"       "<<wholetime[i]<<"        "<<weighttime[i]<<endl;
	}
	cout<<endl;
	cout<<"平均周转时间："<<avewholetime<<"            "<<"平均带权周转时间："<<aveweighttime<<endl;
	cout<<endl;
	same3();
	cout<<endl;
}
void s(int i)//实现最短作业法（非抢占式）的排序
{
	double exchange;
	for(int h=i;i<processnum;i++)
	{
	   for(int j=i+1;j<processnum;j++)
	   {
          if(a[h]>a[j])
		  {
			  exchange=a[h];
			  a[h]=a[j];
			  a[j]=exchange;
			  exchange=b[h];
			  b[h]=b[j];
			  b[j]=exchange;
			  exchange=name[h];
			  name[h]=name[j];
			  name[j]=exchange;
			  
		  }
	   }
	}
}
void fcfs()//先来先服务算法
{
	same1('f');	
	for(int i=0;i<processnum;i++)
	{
		a[i]=arrivetime[i];
		b[i]=runtime[i];
	}
int	i=0;
	s(0);
	same2();
	samejisuan();

}
void sjf()//最短作业算法
{
	int i;
	same1('s');
	for(int i=0;i<processnum;i++)
	{
		a[i]=arrivetime[i];
		b[i]=runtime[i];
	}
	i=0;
	s(0);
	for(int i=0;i<processnum;i++)
	{
		arrivetime[i]=a[i];
		runtime[i]=b[i];
	}
//以上实现到达时间的排序，并同步更新，保证最先到达的进程开始执行
	for(int i=0;i<processnum;i++)
	{
		a[i]=runtime[i];
		b[i]=arrivetime[i];
	}
	s(1);
	for(int i=0;i<processnum;i++)
	{
		arrivetime[i]=b[i];
		runtime[i]=a[i];
	}
//以上实现作业时间的排序，并同步更新，保证最短作业进程能够先执行
	same2();
	samejisuan();
}
int main()
{   
	char j='y';
	while(j=='y')
	{	
		cout<<"请选择算法演示类型： 先来先服务算法请输入“f”   最短作业优先法请输入“s”"<<endl;
		cout<<endl;
	    cout<<"请输入：  ";
		cin>>sign;
		cout<<endl;
	   switch(sign)
	  {
	    case 'f' : fcfs();break;
	    case 's' : sjf() ;break;
	    default  : cout<<"输入有误！";
	  }
	  j='n';
      cout<<"演算完毕！如需要继续演算请输入‘y’，退出请输入‘n'"<<endl;
	  cout<<endl;
	  cin>>j;
	  h+=24;//由于要想成功实现光标准确定位，此处按照每次输入的进程数为3而
                //设置了加上24
	}
	
	return 0;
}